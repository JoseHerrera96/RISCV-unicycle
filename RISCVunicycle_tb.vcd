$date
	Sun Jul 28 13:56:22 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module RISCVunicycle_tb $end
$var parameter 32 ! CLK_PERIOD $end
$var reg 1 " clock $end
$var reg 1 # rst $end
$scope module dut $end
$var wire 1 $ clk $end
$var wire 1 " clock $end
$var wire 1 % reset $end
$var wire 1 # rst $end
$var wire 1 & zero $end
$var wire 32 ' pc_out [31:0] $end
$var wire 32 ( instruct [31:0] $end
$var wire 32 ) ext_imm [31:0] $end
$var wire 32 * dout [31:0] $end
$var wire 32 + D2 [31:0] $end
$var wire 32 , D1 [31:0] $end
$var wire 32 - ALUout [31:0] $end
$var reg 32 . Aluin1 [31:0] $end
$var reg 32 / Aluin2 [31:0] $end
$var reg 5 0 R1 [4:0] $end
$var reg 5 1 R2 [4:0] $end
$var reg 5 2 Rd [4:0] $end
$var reg 32 3 addrs [31:0] $end
$var reg 4 4 alu_op [3:0] $end
$var reg 32 5 alu_src [31:0] $end
$var reg 32 6 datainmemory [31:0] $end
$var reg 32 7 dataregin [31:0] $end
$var reg 7 8 funct3 [6:0] $end
$var reg 12 9 imm [11:0] $end
$var reg 32 : instaddr [31:0] $end
$var reg 1 ; mem_read $end
$var reg 1 < mem_write $end
$var reg 7 = opcode [6:0] $end
$var reg 32 > outp [31:0] $end
$var reg 1 ? pcnext $end
$var reg 1 @ regenb $end
$scope module extensorS $end
$var wire 7 A typ [6:0] $end
$var wire 32 B instruct [31:0] $end
$var wire 12 C inS [11:0] $end
$var wire 12 D inL [11:0] $end
$var wire 12 E in [11:0] $end
$var reg 32 F out [31:0] $end
$upscope $end
$scope module modInstm $end
$var wire 1 G RegWrite $end
$var wire 32 H WriteData [31:0] $end
$var wire 32 I WriteReg [31:0] $end
$var wire 32 J addr [31:0] $end
$var wire 1 K clock $end
$var wire 32 L instruct [31:0] $end
$upscope $end
$scope module modPC $end
$var wire 1 $ clk $end
$var wire 1 ? pcnext $end
$var wire 1 % reset $end
$var reg 32 M pc_reg [31:0] $end
$upscope $end
$scope module modalu $end
$var wire 32 N A [31:0] $end
$var wire 4 O ALUctl [3:0] $end
$var wire 32 P B [31:0] $end
$var reg 32 Q ALUout [31:0] $end
$var reg 1 & zero $end
$upscope $end
$scope module modmemory $end
$var wire 32 R address [31:0] $end
$var wire 1 $ clk $end
$var wire 1 ; read_enable $end
$var wire 32 S write_data [31:0] $end
$var wire 1 < write_enable $end
$var reg 32 T read_data [31:0] $end
$upscope $end
$scope module modregfile $end
$var wire 32 U Data1 [31:0] $end
$var wire 32 V Data2 [31:0] $end
$var wire 5 W RD [4:0] $end
$var wire 5 X Read1 [4:0] $end
$var wire 5 Y Read2 [4:0] $end
$var wire 1 @ RegWrite $end
$var wire 32 Z WriteData [31:0] $end
$var wire 1 $ clock $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10 !
$end
#0
$dumpvars
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
b0 M
bx L
zK
bx J
bz I
bz H
zG
bx F
bx E
bx D
bx C
bx B
bx A
x@
x?
bx >
bx =
x<
x;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
b0 '
x&
z%
z$
1#
0"
$end
#1000000
1"
0#
#2000000
0"
#3000000
1"
#4000000
0"
#5000000
1"
#6000000
