$date
	Thu May 01 00:40:34 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module RISCVunicycle_tb $end
$var wire 1 ! finish_flag $end
$var parameter 32 " CLK_PERIOD $end
$var reg 1 # clock $end
$var reg 1 $ rst $end
$scope module dut $end
$var wire 1 # clock $end
$var wire 1 $ rst $end
$var wire 1 % zero $end
$var wire 32 & pc_out [31:0] $end
$var wire 1 ' last_instr_flag $end
$var wire 32 ( instruct [31:0] $end
$var wire 32 ) ext_imm [31:0] $end
$var wire 32 * dout [31:0] $end
$var wire 32 + D2 [31:0] $end
$var wire 32 , D1 [31:0] $end
$var wire 32 - ALUout [31:0] $end
$var reg 32 . Aluin1 [31:0] $end
$var reg 32 / Aluin2 [31:0] $end
$var reg 5 0 R1 [4:0] $end
$var reg 5 1 R2 [4:0] $end
$var reg 5 2 Rd [4:0] $end
$var reg 32 3 addrs [31:0] $end
$var reg 1 4 aluSrc_cntrl_ready $end
$var reg 4 5 alu_op [3:0] $end
$var reg 1 6 alu_ready $end
$var reg 32 7 alu_src [31:0] $end
$var reg 1 8 branch $end
$var reg 32 9 branch_offset [31:0] $end
$var reg 1 : busy $end
$var reg 32 ; datainmemory [31:0] $end
$var reg 32 < dataregin [31:0] $end
$var reg 1 = decode_begin $end
$var reg 1 > decode_done $end
$var reg 1 ! finish_flag $end
$var reg 4 ? funct3 [3:0] $end
$var reg 7 @ funct7 [6:0] $end
$var reg 12 A imm [11:0] $end
$var reg 1 B lw_data_ready $end
$var reg 1 C mem_read $end
$var reg 1 D mem_write $end
$var reg 7 E opcode [6:0] $end
$var reg 1 F regenb $end
$scope module extensorS $end
$var wire 32 G instruct [31:0] $end
$var reg 32 H out [31:0] $end
$var reg 7 I typ [6:0] $end
$upscope $end
$scope module modInstm $end
$var wire 32 J instruct [31:0] $end
$var wire 32 K addr [31:0] $end
$var reg 32 L d [31:0] $end
$var reg 32 M full_RF_temp [31:0] $end
$var reg 32 N instruct_temp [31:0] $end
$var reg 1 ' last_instr_flag $end
$scope begin $ivl_for_loop0 $end
$var integer 32 O i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 P j [31:0] $end
$upscope $end
$scope begin $ivl_for_loop2 $end
$var integer 32 Q i [31:0] $end
$upscope $end
$upscope $end
$scope module modPC $end
$var wire 1 8 branch $end
$var wire 32 R branch_offset [31:0] $end
$var wire 1 # clk $end
$var wire 1 ! finish_flag $end
$var wire 1 $ reset $end
$var reg 32 S pc_reg [31:0] $end
$var reg 32 T pc_reg_next [31:0] $end
$upscope $end
$scope module modalu $end
$var wire 32 U A [31:0] $end
$var wire 4 V ALUctl [3:0] $end
$var wire 32 W B [31:0] $end
$var reg 32 X ALUout [31:0] $end
$var reg 1 % zero $end
$upscope $end
$scope module modmemory $end
$var wire 32 Y address [31:0] $end
$var wire 1 # clk $end
$var wire 1 C read_enable $end
$var wire 32 Z write_data [31:0] $end
$var wire 1 D write_enable $end
$var reg 32 [ read_data [31:0] $end
$upscope $end
$scope module modregfile $end
$var wire 32 \ Data1 [31:0] $end
$var wire 32 ] Data2 [31:0] $end
$var wire 5 ^ RD [4:0] $end
$var wire 5 _ Read1 [4:0] $end
$var wire 5 ` Read2 [4:0] $end
$var wire 1 F RegWrite $end
$var wire 32 a WriteData [31:0] $end
$var wire 1 # clock $end
$var wire 1 ! finish_flag $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1111101000 "
$end
#0
$dumpvars
bx a
b0 `
b0 _
b0 ^
b0 ]
b0 \
bx [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b100 T
b11111111111111111111111111111100 S
b0 R
b100000 Q
b100000 P
b10000000 O
b11111111111111111111111111111111 N
bx M
b10000000 L
b11111111111111111111111111111100 K
bx J
bx I
b0 H
bx G
0F
b0 E
0D
0C
0B
b0 A
bx @
b0 ?
0>
0=
bx <
b0 ;
0:
b0 9
08
b0 7
06
b0 5
04
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
bx *
b0 )
bx (
0'
b11111111111111111111111111111100 &
0%
1$
0#
0!
$end
#500000
1#
#1000000
0#
0$
#1500000
b111 <
b111 a
b111 -
b111 X
06
b111 /
b111 W
04
b111 7
1F
0>
b10 5
b10 V
b111 A
b1 2
b1 ^
b10011 E
0:
b111 )
b111 H
b10011 I
0=
b11100000000000010010011 (
b11100000000000010010011 G
b11100000000000010010011 J
b0 &
b0 K
b0 S
1#
#2000000
0#
#2500000
06
04
0>
0:
1F
0=
b100 &
b100 K
b100 S
1#
#3000000
0#
#3500000
b11111111111111111111111111110110 <
b11111111111111111111111111110110 a
b11111111111111111111111111110110 -
b11111111111111111111111111110110 X
06
b11111111111111111111111111110110 /
b11111111111111111111111111110110 W
04
b11111111111111111111111111110110 7
0>
b111111110110 A
b10 2
b10 ^
0:
1F
b11111111111111111111111111110110 )
b11111111111111111111111111110110 H
0=
b11111111011000000000000100010011 (
b11111111011000000000000100010011 G
b11111111011000000000000100010011 J
b1000 &
b1000 K
b1000 S
1#
#4000000
0#
#4500000
b1 3
b1 Y
1B
b1 -
b1 X
06
b1 /
b1 W
04
b1 7
1C
0>
b1 A
b100 2
b100 ^
b11 E
0:
1F
b1 )
b1 H
b11 I
0=
b100000010001000000011 (
b100000010001000000011 G
b100000010001000000011 J
b1100 &
b1100 K
b1100 S
1#
#5000000
0#
#5500000
b11 3
b11 Y
b11 -
b11 X
06
b11 /
b11 W
04
b11 7
0>
b11 A
b101 2
b101 ^
0:
1C
1F
b11 )
b11 H
0=
b110 <
b110 a
1B
b110 *
b110 [
b1100000010001010000011 (
b1100000010001010000011 G
b1100000010001010000011 J
b10000 &
b10000 K
b10000 S
1#
#6000000
0#
#6500000
b0 -
b0 X
06
b0 /
b0 W
04
b0 7
0>
b0 A
b0 2
b0 ^
b10011 E
0:
0C
1F
b0 )
b0 H
b10011 I
0=
b0 <
b0 a
0B
b10011 (
b10011 G
b10011 J
b10100 &
b10100 K
b10100 S
b1 *
b1 [
1#
#7000000
0#
#7500000
b111 <
b111 a
b111 -
b111 X
06
b1 /
b1 W
b110 .
b110 U
04
b1 7
0>
b0 @
b110 2
b110 ^
b1 +
b1 ]
b101 1
b101 `
b110 ,
b110 \
b100 0
b100 _
b110011 E
0:
1F
b110011 I
0=
b10100100000001100110011 (
b10100100000001100110011 G
b10100100000001100110011 J
b11000 &
b11000 K
b11000 S
1#
#8000000
0#
#8500000
b1 ;
b1 Z
b1000 3
b1000 Y
b1000 -
b1000 X
06
b1000 /
b1000 W
b0 .
b0 U
04
b1000 7
1D
0>
b1000 A
b0 ,
b0 \
b0 0
b0 _
b100011 E
0:
0F
b1000 )
b1000 H
b100011 I
0=
b11000000010010000100011 (
b11000000010010000100011 G
b11000000010010000100011 J
b11100 &
b11100 K
b11100 S
1#
#9000000
0#
#9500000
08
b11111111111111111111111111111001 <
b11111111111111111111111111111001 a
1%
b11111111111111111111111111111001 -
b11111111111111111111111111111001 X
06
b111 /
b111 W
b0 .
b0 U
04
b111 7
0>
b11111111111111111111111111110010 9
b11111111111111111111111111110010 R
b111111110010 A
b111 +
b111 ]
b1 1
b1 `
b110 5
b110 V
b11111111111111111111111111111001 ,
b11111111111111111111111111111001 \
b110 0
b110 _
b110000 E
0:
0D
b0 )
b0 H
b110000 I
0=
b100110000000000110000 (
b100110000000000110000 G
b100110000000000110000 J
b10010 &
b10010 K
b10010 S
1#
#10000000
0#
#10500000
b11111111111111111111111111110010 ,
b11111111111111111111111111110010 \
b11111111111111111111111111110010 <
b11111111111111111111111111110010 a
b11111111111111111111111111110010 -
b11111111111111111111111111110010 X
06
b11111111111111111111111111111001 .
b11111111111111111111111111111001 U
04
0>
b0 E
0:
b0 I
0=
b11001100110000000000000000 (
b11001100110000000000000000 G
b11001100110000000000000000 J
b10110 &
b10110 K
b10110 S
1#
#11000000
0#
#11500000
b11111111111111111111111111101011 ,
b11111111111111111111111111101011 \
b11111111111111111111111111101011 <
b11111111111111111111111111101011 a
b11111111111111111111111111101011 -
b11111111111111111111111111101011 X
06
b11111111111111111111111111110010 .
b11111111111111111111111111110010 U
04
0>
b1010010 E
0:
b1010010 I
0=
b100100001000110000000001010010 (
b100100001000110000000001010010 G
b100100001000110000000001010010 J
b11010 &
b11010 K
b11010 S
1#
#12000000
0#
#12500000
b11111111111111111111111111100100 ,
b11111111111111111111111111100100 \
b11111111111111111111111111100100 <
b11111111111111111111111111100100 a
b11111111111111111111111111100100 -
b11111111111111111111111111100100 X
06
b11111111111111111111111111101011 .
b11111111111111111111111111101011 U
04
0>
b1100000 E
0:
b1100000 I
0=
b10111000110000000001100000 (
b10111000110000000001100000 G
b10111000110000000001100000 J
b11110 &
b11110 K
b11110 S
1#
#13000000
0#
#13500000
b0 <
b0 a
b0 -
b0 X
06
b1000001 /
b1000001 W
b0 .
b0 U
04
b1000001 7
1F
0>
b0 5
b0 V
b1000001 A
b111 ?
b11100 2
b11100 ^
b0 ,
b0 \
b111 0
b111 _
b10011 E
0:
b1000001 )
b1000001 H
b10011 I
0=
b100000100111111111000010011 (
b100000100111111111000010011 G
b100000100111111111000010011 J
b100010 &
b100010 K
b100010 S
1#
#14000000
0#
#14500000
06
04
0>
b11110 0
b11110 _
b100000 E
0:
0F
b0 )
b0 H
b100000 I
0=
b11111111111111110000000010100000 (
b11111111111111110000000010100000 G
b11111111111111110000000010100000 J
b100110 &
b100110 K
b100110 S
1#
#15000000
0#
#15500000
06
04
1!
0>
b11111 0
b11111 _
b1111111 E
0:
b1111111 I
1'
0=
b11111111111111111111111111111111 (
b11111111111111111111111111111111 G
b11111111111111111111111111111111 J
b101010 &
b101010 K
b101010 S
1#
